{"version":3,"file":"static/css/main.2a1d23cf.chunk.css","sources":["webpack:///src/Wizard/Wizard.scss","webpack:///src/WizardHeader/WizardHeader.scss","webpack:///src/WizardSteps/components/WizardNavigation/WizardNavigation.scss","webpack:///src/WizardSteps/components/WizardNavigations/WizardNavigations.scss","webpack:///src/WizardSteps/components/WizardControls/WizardControls.scss","webpack:///src/WizardSteps/components/WizardStep/WizardStep.scss","webpack:///node_modules/@sebgroup/bootstrap/scss/bootstrap-core/mixins/_breakpoints.scss"],"sourcesContent":["@import 'src/styles';\n\n.wizard {\n  overflow-y: auto;\n}\n\n@include media-breakpoint-up(md) {\n  .wizard {\n    overflow-y: hidden;\n\n    .wizard-navigations {\n      height: calc(100vh - #{$wizard-header-height});\n    }\n\n    .wizard-step {\n      max-height: calc(\n        100vh - #{$wizard-header-height} - #{$wizard-controls-height}\n      );\n    }\n  }\n}\n","@import 'src/styles';\n\n.wizard-header {\n  .navbar {\n    height: $wizard-header-height;\n  }\n}\n\n.wizard-actions {\n  button {\n    &:nth-of-type(n + 2) {\n      margin-left: 1rem;\n    }\n  }\n}\n","@import 'src/styles';\n\nli.list-group-item.wizard-navigation {\n  border-top: 1px solid transparent;\n  padding: 0;\n\n  a {\n    display: flex;\n    position: relative;\n    padding: 1rem 2.5rem;\n    width: 100%;\n    font-weight: inherit;\n    text-decoration: none;\n    color: inherit;\n  }\n\n  &::before {\n    position: absolute;\n    top: 1rem;\n    left: 1rem;\n    width: auto;\n    font-weight: inherit;\n  }\n\n  &::after {\n    position: absolute;\n    top: 1.25rem;\n    right: 1rem;\n    cursor: pointer;\n  }\n\n  &--info {\n    &::after {\n      @include icon('info-state');\n    }\n  }\n\n  &--warning {\n    &::after {\n      border-radius: 3px;\n      @include icon('warning-state');\n      background-color: black;\n      background-size: cover;\n    }\n  }\n\n  &--danger {\n    &::after {\n      @include icon('danger-state');\n    }\n  }\n\n  &--success,\n  &--passed {\n    background-color: $gray-100;\n\n    &::after {\n      @include icon('check');\n    }\n  }\n\n  &:hover,\n  &--active {\n    &:not(.list-group-item--disabled) {\n      font-weight: $font-weight-medium;\n      background-color: $white;\n      box-shadow: 0 0 0.5rem rgba($black, 0.15);\n\n      a {\n        font-weight: inherit;\n      }\n    }\n  }\n\n  &--disabled {\n    a {\n      cursor: not-allowed;\n    }\n  }\n}\n","@import 'src/styles';\n\n.wizard-navigations {\n  background-color: $gray-200;\n\n  &__toggle {\n    cursor: pointer;\n\n    &::after {\n      @include icon('chevron-down');\n      margin-top: 3px;\n      margin-right: 1rem;\n      width: 1.5rem;\n      height: 1.5rem;\n      transform: rotate(0deg);\n      transition: all $animation-duration $animation-timing;\n    }\n\n    &--active {\n      &::after {\n        transform: rotate(-180deg);\n      }\n    }\n  }\n\n  .list-group {\n    &.list-group-ordered {\n      counter-reset: list-order;\n    }\n  }\n}\n\n@include media-breakpoint-down(sm) {\n  .wizard-navigations {\n    .list-group {\n      &-enter {\n        opacity: 0;\n        transform: scaleY(0.5);\n      }\n\n      &-enter-active {\n        opacity: 1;\n        transform: scaleY(1);\n        transform-origin: top;\n        transition: opacity $animation-duration $animation-timing,\n          transform $animation-duration $animation-timing;\n      }\n\n      &-exit {\n        opacity: 1;\n        transform: scaleY(1);\n      }\n\n      &-exit-active {\n        opacity: 0;\n        transform: scaleY(0);\n        transform-origin: top;\n        transition: opacity $animation-duration $animation-timing,\n          transform $animation-duration $animation-timing;\n      }\n\n      &-exit-done {\n        display: none;\n      }\n    }\n  }\n}\n","@import 'src/styles';\n\n@mixin capitalize-first-letter {\n  text-transform: lowercase;\n\n  &::first-letter {\n    text-transform: uppercase;\n  }\n}\n\n.wizard-controls {\n  .btn {\n    @include capitalize-first-letter;\n  }\n\n  .btn-next,\n  .btn-prev {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n\n    span {\n      @include capitalize-first-letter;\n    }\n  }\n\n  .btn-next {\n    &::after {\n      @include icon('arrow-right');\n      margin-left: 0.5rem;\n      filter: $white-filter;\n    }\n  }\n\n  .btn-prev {\n    &::before {\n      @include icon('arrow-left');\n      margin-right: 0.5rem;\n      filter: $primary-filter;\n    }\n\n    &:active,\n    &:hover {\n      &::before {\n        filter: $white-filter;\n      }\n    }\n  }\n}\n","@import 'src/styles';\n\n.wizard-main {\n  max-width: $wizard-content-max-width;\n}\n\n@include media-breakpoint-up(md) {\n  .wizard-step {\n    max-height: calc(100vh - #{$wizard-controls-height});\n    overflow-y: auto;\n\n    // increase selector specificity to avoid storybook namespace clutter\n    .wizard-controls {\n      position: fixed;\n      right: 0;\n      bottom: 0;\n      left: $wizard-navigation-width;\n      border-top: 1px solid $gray-300;\n      padding: $spacer;\n      background: $white;\n      transition: all 0.4s ease-out;\n      z-index: 1; // increase z-index to overlap contents from wizard content\n\n      .form-row {\n        max-width: $wizard-content-max-width;\n      }\n    }\n  }\n}\n\n@include media-breakpoint-up(lg) {\n  .wizard-secondary-content {\n    max-width: $wizard-secondary-content-max-width;\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"mappings":"AAEA;;AAaA;ACZA;ACDA;ACAA;ACSA;ACTA;AC0DA;","sourceRoot":""}